#+title: Journal

* <2023-10-13 Fri>
  - did not sleep at all, just wanted to get the advanced calc midterm done and sleep
  - got the operations research midterm and assignment mark back, not terrible, not great
  - only solved one question during the Putnam practice
  - advanced calc midterm were not great, clearly not doing analysis type questions frequently has a cost
  - got jealous for something very stupid

I have not done anything useful or written any substantial code for almost 2 weeks now. In some sense, I feel defeacted.

[[https://youtu.be/v7qZJ31S6M0][This video]] is an interesting take on psychological addiction. I'm not psychologically addicted to canabis but I must admit fool myself claiming I can stop some unspecified activity whenever I want yet I know such activity is basically my norm now.

Did messaged someone eventually, that was good.

Need to figure out what's the best practice for linebreaks in org mode.

* <2023-10-15 Sun>
The company VeriSign, which controls two of the root DNS resolvers, was a spin off from RSA securities, a company known for incorperating backdoor into their products. They sold off their TLS certificate business in early 2000s, which eventually became DigiCert. If you want to believe in conspiracy theories, then this is a great place to start.

Yes, the RSA security was founded by the three co-authors that invented the RSA encryption scheme.

* <2023-10-16 Mon>
- TAs claimed `The submitted a1.c program doesn't compile` when it never stated that the file needs to be named specifically and `make` does work
  - need to talk to them on <2023-10-18 Wed> about this, reeeeee

* <2023-10-17 Tue>
The internet is now properly old, even the world wide web cannot be described as young anymore. This is reflected in the architecture of the internet. Many of the designs seem bizarre but if you map them onto the world of 1980s, everything will seem more normal.

- only organizations can afford a network, hence domain names are mostly for organizations
- encryption wasn't strictly necessary since most of the traffic was meant to travel within the organization

* <2023-10-18 Wed>
- I am a completely different person when I am on caffeine versus when I'm not

Someone dismissed theoretical work in comptuer science today; I get slightly depressed whenever people do that. Without advancement in theory, many things people take granted simply can't work.

Modern distributed system is built on theoretical algorithms like Paxos, Raft, and Zab. Furthermore, without a theoretical framework, how can you even convince yourself that they actually work as expected?

While conceptually flawed, the popularity of NoSQL database today can be traced back to the famous Google paper that introduced the CAP theorem.

How many people uses Google Docs daily without considering the Operation Transformation (OT) algorithm it uses to merge everybody's changes and maintain a consistent view? A related area of research is Conflict-free Replicated Data Types (CRDT), which allows for states to be consistently maintained without the use of a central server (most OT requires a central server). A key insight in CRDT is we want the merge operation to be commutative, if you dismiss theory, you lose the ability to describe what you want.

Even langagues like Java traces their partial origin to the work of Norwegian mathematicians in the 60s for the language SIMULA. Their choice of vocabulary still affect us today, a class is called a class because they were model after classes in mathematics, a collection of structures fulfilling some properties.

--------------------------------------------------------------------------------

I'm really starting to think async IO and distributed systems share many similarities, and perhaps we can port our results in distributed to how we design for async io.

While it may seem there is a ditchotomy between compute and io, it's closer to RPC than people think. Non trivial IO cannot happen automagically, some computation happens on the IO devices, such as SDD memory controllers, and the result of the operation is communicated to you via interrupts.

Of course, a major class of problem in distributed computing is not relavent in async io, the communication between devices and CPU can be seem as always reliable for practical purposes. However, the issue of consistency seems to be applicable to both. This is motivated by my thoughts around cancellation in io_uring.

Suppose you issue a read, then later cancel the read, perhaps you wanted to race between reads from two different sources, you can't just deallocate the buffer because the device/kernel doesn't know your intention. It will try to write buffer, which now contains content that isn't used for the IO. This is basically the issue of consistency.

I really want the proactor style of IO of io_uring to work in Rust, yet it seems the ability to cancel any future by simply no longer calling `poll()` on it doesn't pair with proactors well.ðŸ˜­

--------------------------------------------------------------------------------

I really like the Rust community, I got introduced to so many new areas and concepts by them.
- category theory
  - algebraic geometry
  - formal methods
  - intuitionistic logic
- more systematic view of async
- ML series of languages

I don't think you can get the same with Java, the Java community by comparision doesn't inspire curiosity much. When you stop desiring for a better world (both in better programs and a better world politically) life loses it purpose.

- I really should stop procrastinating and actually finish my 4900 report.

* <2023-10-19 Thu>
- mostly done theory of comp assignment
  - easier than expected
  - the moment when I realized it's basically using DFS to handle non determinism was very cool
- talked to a friend, felt nice
- felt energetic today, that was good
- roommate was coughing loudly, that's not good ðŸ˜¨

Why do humans form attractions? Sometimes I wish such thing never existed so I can't get distracted by such nonsense.
- did see that person today but didn't get to talk to them in any meanful way

--------------------------------------------------------------------------------

It's hard to believe that I'm in 4th year already... I've stated in many places that I felt I wasted my first two years. I never had the illusion that university will provide me with skills directly applicable to software jobs, I don't actually want/care those skills in an academic setting.

The courses that I felt were the culmination of an undergrad degree in CS and math includes
1. theory of computation
2. compilers
3. real analysis
4. group and ring theory

Taking theory of comp and real analysis this semester, I feel quite disappointed. It's mid way and the church turing thesis, and halting problem are still not covered. Real analysis is FUCKING JOKE, I CAN'T FUCKING BELEIVE THEY STILL HAVEN'T COVERED DEDEKIND CUT OR CAUCHY SEQUENCE. I also thought they are gonna show Cantor's diagonal proof of the cardinality of reals (which actually I was already shown the proof in CIS2910 in first year!).

My opinion on the school has never been constant. I belive a lot of courses are complete jokes, but I cope myself with the community vibe.

Maybe I'll form a longer piece about what I think of school later, but not now. Can't be bothered.

--------------------------------------------------------------------------------

4 years ago, I didn't understand category theory, now, I still don't. Although progress is being made.

I don't think it's a good idea for this thing to just being dumping ground for negative energy so maybe I'll stop.


- I really need to figure out how to enable spell check in doom emacs.


* <2023-10-23 Mon>
Day wasted

* <2023-10-24 Tue>
Day wasted
- got jealous again for something stupid

* <2023-10-25 Wed>
Day wasted
- 4900 meetup pushed to friday

* <2023-10-26 Thu>
- worked on stupid real analysis quiz overnight
- finished operations research assignment
- I'm totally depressed and burnt out

- Real analysis course is a joke.
- Theory of comp course is a joke.


- I don't want to work on math
- I don't want to write softwares
